# Generated by Django 3.2.18 on 2024-09-24 04:50

from django.db import migrations, models
import django.db.models.deletion


def migrate_notification_categories(apps, schema_editor):
    """Migrate existing notification categories to new choices"""
    Notification = apps.get_model("judge", "Notification")

    # Mapping from old category strings to new choices
    category_mapping = {
        "Add blog": "add_blog",
        "Added to group": "added_to_group",
        "Comment": "comment",
        "Delete blog": "delete_blog",
        "Reject blog": "reject_blog",
        "Approve blog": "approve_blog",
        "Edit blog": "edit_blog",
        "Mention": "mention",
        "Reply": "reply",
        "Ticket": "ticket",
    }

    # Update existing notifications
    for notification in Notification.objects.all():
        old_category = notification.category

        # Handle problem visibility categories
        if "Problem public" in old_category:
            is_public = "True" in old_category
            groups = ""

            # Parse groups from strings like "Problem public (True) (group1,group2)"
            if "(" in old_category and ")" in old_category:
                # Split by opening parenthesis and get everything after first one
                parts = old_category.split("(", 1)[1]
                # If there are multiple closing/opening parentheses, extract groups
                if ") (" in parts:
                    # Extract the groups part after ") ("
                    groups = parts.split(") (", 1)[1].strip(")")
                elif parts.strip(")") not in ["True", "False"]:
                    # Single parenthesis case, check if it's not just True/False
                    groups = parts.strip(")")

                # Store groups info in extra_data if we found any
                if groups and groups not in ["True", "False"]:
                    notification.extra_data = {"groups": groups}

            notification.category = "problem_public" if is_public else "problem_private"
        else:
            # Map other categories
            notification.category = category_mapping.get(
                old_category, old_category.lower().replace(" ", "_")
            )

        notification.save()


def reverse_migrate_notification_categories(apps, schema_editor):
    """Reverse migration for notification categories"""
    Notification = apps.get_model("judge", "Notification")

    # Reverse mapping from new choices to old strings
    reverse_mapping = {
        "add_blog": "Add blog",
        "added_to_group": "Added to group",
        "comment": "Comment",
        "delete_blog": "Delete blog",
        "reject_blog": "Reject blog",
        "approve_blog": "Approve blog",
        "edit_blog": "Edit blog",
        "mention": "Mention",
        "reply": "Reply",
        "ticket": "Ticket",
    }

    for notification in Notification.objects.all():
        new_category = notification.category

        # Handle problem visibility categories
        if new_category in ["problem_public", "problem_private"]:
            is_public = new_category == "problem_public"
            groups = (
                notification.extra_data.get("groups", "")
                if notification.extra_data
                else ""
            )

            if groups and groups not in ["True", "False"]:
                notification.category = (
                    f"Problem public (True) ({groups})"
                    if is_public
                    else f"Problem public (False) ({groups})"
                )
            else:
                notification.category = (
                    "Problem public (True)" if is_public else "Problem public (False)"
                )
        else:
            # Map other categories back
            notification.category = reverse_mapping.get(new_category, new_category)

        notification.save()


class Migration(migrations.Migration):

    dependencies = [
        ("judge", "0209_alter_course_organizations"),
    ]

    operations = [
        # Add new fields to the notification model
        migrations.AddField(
            model_name="notification",
            name="is_read",
            field=models.BooleanField(
                default=False, verbose_name="is read", db_index=True
            ),
        ),
        migrations.AddField(
            model_name="notification",
            name="read_at",
            field=models.DateTimeField(blank=True, null=True, verbose_name="read at"),
        ),
        migrations.AddField(
            model_name="notification",
            name="extra_data",
            field=models.JSONField(
                blank=True,
                default=dict,
                help_text="Additional data for complex notifications",
                verbose_name="extra data",
            ),
        ),
        # First, increase category field length to accommodate existing long values
        migrations.AlterField(
            model_name="notification",
            name="category",
            field=models.CharField(
                max_length=100000,  # Temporary larger size
                verbose_name="category",
                db_index=True,
            ),
        ),
        # Run the data migration to convert categories
        migrations.RunPython(
            migrate_notification_categories,
            reverse_migrate_notification_categories,
        ),
        # Now reduce to final size with choices after data migration
        migrations.AlterField(
            model_name="notification",
            name="category",
            field=models.CharField(
                choices=[
                    ("add_blog", "Added a post"),
                    ("added_to_group", "You are added to a group"),
                    ("comment", "You have a new comment"),
                    ("delete_blog", "Deleted a post"),
                    ("reject_blog", "Rejected a post"),
                    ("approve_blog", "Approved a post"),
                    ("edit_blog", "Edited a post"),
                    ("mention", "Mentioned you"),
                    ("organization", "Organization"),
                    ("problem", "Problem"),
                    ("reply", "Replied you"),
                    ("ticket", "Ticket"),
                    ("problem_public", "Problem visibility changed"),
                    ("problem_private", "Problem visibility changed"),
                ],
                db_index=True,
                max_length=50,
                verbose_name="category",
            ),
        ),
        migrations.AlterField(
            model_name="notification",
            name="owner",
            field=models.ForeignKey(
                db_index=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="notifications",
                to="judge.profile",
                verbose_name="owner",
            ),
        ),
        migrations.AlterField(
            model_name="notification",
            name="time",
            field=models.DateTimeField(
                auto_now_add=True, db_index=True, verbose_name="posted time"
            ),
        ),
        migrations.AlterField(
            model_name="notification",
            name="author",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="authored_notifications",
                to="judge.profile",
                verbose_name="who triggered, used for non-comment",
            ),
        ),
        # Update NotificationProfile model
        migrations.AlterField(
            model_name="notificationprofile",
            name="unread_count",
            field=models.IntegerField(default=0, db_index=True),
        ),
        migrations.AlterField(
            model_name="notificationprofile",
            name="user",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="notification_profile",
                to="judge.profile",
            ),
        ),
        migrations.AddField(
            model_name="notificationprofile",
            name="last_read_time",
            field=models.DateTimeField(
                blank=True, null=True, verbose_name="last read time"
            ),
        ),
        # Add indexes
        migrations.AddIndex(
            model_name="notification",
            index=models.Index(
                fields=["owner", "is_read"],
                name="judge_notif_owner_i_090eba_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="notification",
            index=models.Index(
                fields=["category", "-time"],
                name="judge_notif_categor_052919_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="notification",
            index=models.Index(fields=["time"], name="judge_notif_time_94feb0_idx"),
        ),
        # Update model metadata
        migrations.AlterModelOptions(
            name="notification",
            options={
                "ordering": ["-time"],
                "verbose_name": "notification",
                "verbose_name_plural": "notifications",
            },
        ),
        migrations.AlterModelOptions(
            name="notificationprofile",
            options={
                "verbose_name": "notification profile",
                "verbose_name_plural": "notification profiles",
            },
        ),
    ]
